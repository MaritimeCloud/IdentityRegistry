server_tokens off;

ssl_certificate     /etc/nginx/certs/nginx-ssl.pem; # should point to a valid TLS certificate
ssl_certificate_key /etc/nginx/certs/nginx-ssl.key; # should point to the private key of the TLS certificate
ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
ssl_prefer_server_ciphers on;
ssl_ciphers "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !RC4";

server {
    listen 443 ssl default_server;
    server_name _;
    location / { return 403; }
}

# used when using client certificate based authentication for the IR API
server {
    listen 443 ssl;
    server_name  api-x509.example.com; # example.com should be changed to your own domain name

    ssl_client_certificate /etc/nginx/certs/mc-ca-chain.pem; # the CA chain that client certificates should be verified against
    ssl_verify_client optional;
    ssl_crl /etc/nginx/certs/combined-crl.pem; # an up to date CRL to be used for checking revocation status of certificates
    ssl_verify_depth 3;
    error_page 495 = @401;

    location / {
        proxy_pass http://localhost:8443; # should point to the local address and port of your MIR installation
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Client-Certificate $ssl_client_escaped_cert;
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Accept, X-Requested-With, remember-me, authorization';

    }
    location @401 {
        return 401;
    }
}

# used when using OIDC based authentication for the IR API
server {
    listen 443 ssl;
    server_name  api.example.com;

    location / {
        proxy_pass http://localhost:8443;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Accept, X-Requested-With, remember-me, authorization';
        client_max_body_size 5M;
    }
}

# used for getting an OIDC token from Keycloak using username/password login
server {
    listen 443 ssl;
    server_name  maritimeid.example.com;

    ssl_certificate     /etc/nginx/certs/nginx-ssl.pem;
    ssl_certificate_key /etc/nginx/certs/nginx-ssl.key;
    ssl_client_certificate /etc/nginx/certs/mc-ca-chain.pem;
    ssl_verify_client off;

    location / {
        proxy_pass http://localhost:8080; # should point to the local address and port of your Keycloak installation
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# used for getting an OIDC token from Keycloak using a client certificate
server {
    listen 443 ssl;
    server_name  maritimeid-x509.example.com;

    ssl_certificate     /etc/nginx/certs/nginx-ssl.pem;
    ssl_certificate_key /etc/nginx/certs/nginx-ssl.key;
    ssl_client_certificate /etc/nginx/certs/mc-ca-chain.pem;
    ssl_verify_client optional;
    ssl_crl /etc/nginx/certs/combined-crl.pem;
    ssl_verify_depth 2;

    location / {
        proxy_pass http://localhost:8080;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Client-Certificate $ssl_client_escaped_cert;
    }
}

# used for serving OCSP and CRL over normal HTTP instead of HTTPS
server {
    listen 80;
    server_name api-x509.example.com api.example.com;

    location /x509/api/certificates/ {
        proxy_pass http://localhost:8443;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Accept, X-Requested-With, remember-me, authorization';
        client_max_body_size 5M;
    }
}

# redirect all traffic on port 80 (HTTP) to port 443 (HTTPS)
server {
       listen         80;
       server_name    _name_;
       return         301 https://$host$request_uri;
}
